// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, alias, email) VALUES ($1, $2, $3) ON CONFLICT DO NOTHING RETURNING id, email, alias
`

type CreateUserParams struct {
	ID    pgtype.UUID `json:"id"`
	Alias string      `json:"alias"`
	Email string      `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Alias, arg.Email)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Alias)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, alias FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Alias)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET alias = $2
WHERE id = $1
`

type UpdateUserParams struct {
	ID    pgtype.UUID `json:"id"`
	Alias string      `json:"alias"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Alias)
	return err
}
